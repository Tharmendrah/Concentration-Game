## SHUFFLING GAME SIDE PROJECT##

## DESIGNED BY THARMENDRAH SIVAKUMAR

import random
       
def shuffle_deck(deck):
    '''(list of str)->None
       Shuffles the given list of strings representing the playing deck    
    '''
    # YOUR CODE GOES HERE
    random.shuffle(deck)
    return deck

def shuffle_deckV2(deck):
    '''(list of str)->None
       Shuffles the given list of strings representing the playing deck    
    '''
    random.shuffle(deck)
    print_board(deck)
    return deck

def create_board(size):
    '''int->list of str
       Precondition: size is even positive integer between 2 and 52
       Returns a rigorous deck (i.e. board) of a given size.
    '''
#PAUSE
    wait_for_player()
    print('\n'*90)
    
#Function  
    board = [None]*size 
    letter='A'
    for i in range(len(board)//2):
          board[i]=letter
          board[i+len(board)//2 ]=board[i]
          letter=chr(ord(letter)+1)
    shuffle_deck(board)
    print_board(board)

def print_board(a):
    '''(list of str)->None
       Prints the current board in a nicely formated way
    '''
    space = 5
    import os
    if a == 4:
        os._exit(1)
        
        
    a.append(space)
    sumofa = len(a)
    print('Ready to play ...\n')
    b = a
    bb = b[:]
    print(b)
    a = ['*'] * len(a)
    aa = a[:]
    newA1 = a[:size]
    for i in range(len(newA1)):
        print('{0:4}'.format(newA1[i]), end=' ')
    print()
    for i in range(len(newA1)):
        print('{0:4}'.format(str(i+1)), end=' ')
    print('\n\nEnter the distinct positions on the board that you want revealed. \ni.e two integers in the range [' + '1, ' + str(size) + ']')
    p1 = int(input('Enter position 1: ')) - 1
    p2 = int(input('Enter position 2: ')) - 1
    u = 0

    while p1 == p2:
        print('One or both of your chosen positions has already been paired. \nYou chose the same positions. \nPlease try again. This guess did not count. Your current number of guesses is ' + str(sumofa - size - 1))
        print('\nEnter the distinct positions on the board that you want revealed. \ni.e two integers in the range [' + '1, ' + str(size) + ']''')
        p1 = int(input('Enter position 1: ')) - 1
        p2 = int(input('Enter position 2: ')) - 1
        newNewP1 = b[p1]
        newNewP2 = b[p2]
        u = u + 1
        a = a[:-1]
        print('\n')

    newP1 = 0
    for i in range(len(b)):
        if i == p1:
            newP1 = b[p1]
    
    for i in range(len(b)):
        if b[p2] == newP1:
            for i in range(len(a)):
                if i == p1:
                    a[p1] = newP1
                elif i == p2:
                    a[p2] = newP1
            AddP1 = []
            addOn(AddP1, newP1)
            print_revealed(a, p1, p2, b)
            a.append(space)
            print_boardV2(a)
        else:
            newP1 = 0
            newP2 = 0
            for i in range(len(bb)):
                if i == p1:
                    newP1 = bb[p1]

            for i in range(len(bb)):
                if i == p2:
                    newP2 = bb[p2]
    
            if newP1 != newP2:
                for i in range(len(bb)):
                    if i == p1:
                        aa[p1] = newP1
                    elif i == p2:
                        aa[p2] = newP2
            aa = aa[:size]
            print_revealedV3(aa, b)
    return None

def addOn(AddP1, newP1):
    '''(list of str) -> list of str
        Prints the current board with an addition item in order to further assist the program in producing the corrent result
    '''
    AddP1.append(newP1)
    return (AddP1) 

def print_boardV2(a, b):
    '''(list of str)->None
       Prints the current board in a nicely formated way
    '''
#####COUNTING#####
    space = 5
    a.append(space)
    sumofa = len(a)
#####COUNTING#####
    endA = a[:]
    endNewA = ''.join(map(str, endA))
    endNewA = endNewA[:size]
    if '*' in endNewA:
        pass
    else:
        print('Congratulations! You completed the game within ' + str(sumofa - size - 1) + ' guesses. That is ' + str((sumofa - size - 1) - (size//2)) + ' more than the best possible')
        randomThing = 4
        print_board(randomThing)
        
    newA1 = a[:size]
    for i in range(len(newA1)):
        print('{0:4}'.format(newA1[i]), end=' ')
    print()
    for i in range(len(newA1)):
        print('{0:4}'.format(str(i+1)), end=' ')
    print('\n\n\nEnter the distinct positions on the board that you want revealed. \ni.e two integers in the range [' + '1, ' + str(size) + ']')
    
    p1 = int(input('Enter position 1: ')) - 1
    p2 = int(input('Enter position 2: ')) - 1
        
############ERROR CHECK###################
############ERROR CHECK###################
############ERROR CHECK###################
    newNewP1 = b[p1]
    newNewP2 = b[p2]

    s = 0
    while (a[p1]) != (a[p2]):
        print('One or both of your chosen positions has already been paired. \nPlease try again. This guess did not count. Your current number of guesses is ' + str(sumofa - size - 1))
        print('\nEnter the distinct positions on the board that you want revealed. \ni.e two integers in the range [' + '1, ' + str(size) + ']''')
        p1 = int(input('Enter position 1: ')) - 1
        p2 = int(input('Enter position 2: ')) - 1
        newNewP1 = b[p1]
        newNewP2 = b[p2]
        s = s + 1

    t = 0
    while (a[p2]) != (a[p1]):
        print('One or both of your chosen positions has already been paired. \nPlease try again. This guess did not count. Your current number of guesses is ' + str(sumofa - size - 1))
        print('\nEnter the distinct positions on the board that you want revealed. \ni.e two integers in the range [' + '1, ' + str(size) + ']''')
        p1 = int(input('Enter position 1: ')) - 1
        p2 = int(input('Enter position 2: ')) - 1
        newNewP1 = b[p1]
        newNewP2 = b[p2]
        t = t + 1
        
    u = 0
    while p1 == p2:
        print('You chose the same positions. \nPlease try again. This guess did not count. Your current number of guesses is ' + str(sumofa - size -1))
        print('\nEnter the distinct positions on the board that you want revealed. \ni.e two integers in the range [' + '1, ' + str(size) + ']''')
        p1 = int(input('Enter position 1: ')) - 1
        p2 = int(input('Enter position 2: ')) - 1
        newNewP1 = b[p1]
        newNewP2 = b[p2]
        u = u + 1

    x = 0
    while '*' not in a[p2] or '*' not in a[p1]:
        print('You chose the same positions. \nPlease try again. This guess did not count. Your current number of guesses is ' + str(sumofa - size -1))
        print('\nEnter the distinct positions on the board that you want revealed. \ni.e two integers in the range [' + '1, ' + str(size) + ']''')

        p1 = int(input('Enter position 1: ')) - 1
        p2 = int(input('Enter position 2: ')) - 1
        newNewP1 = b[p1]
        newNewP2 = b[p2]
        x = x + 1
############ERROR CHECK###################
############ERROR CHECK###################
############ERROR CHECK###################
    newP1 = 0
    newP2 = 0
    c = a[:]

    for i in range(len(b)):
        if i == p1:
            newP1 = b[p1]

    for i in range(len(b)):
        if i == p2:
            newP2 = b[p2]
          
    for i in range(len(b)):
        if b[p2] == newP1:
            for i in range(len(a)):
                if i == p1:
                    a[p1] = newP1
                elif i == p2:
                    a[p2] = newP1
            print_revealed(a, p1, p2, b)
            
            return None
        elif newP1 != newP2:
            for i in range(len(c)):
                if i == p1:
                    c[p1] = newP1
                elif i == p2:
                    c[p2] = newP2
            c = c[:size]
            print_revealedV2(c, a, b)
            return None

    print(None)

def wait_for_player():
    '''()->None
    Pauses the program/game until the player presses enter
    '''
    print('')
    input("\nPress enter to continue.")
    print()

def print_revealed(discovered, p1, p2, original_board):
    '''(list of str, int, int, list of str)->None
    Prints the current board with the two new positions (p1 & p2) revealed from the original board
    Preconditions: p1 & p2 must be integers ranging from 1 to the length of the board
    '''
    # YOUR CODE GOES HERE
    a = discovered
    discovered = discovered[:size]
    for i in range(len(discovered)):
        print('{0:4}'.format(discovered[i]), end=' ')
    print()
    for i in range(len(discovered)):
        print('{0:4}'.format(str(i+1)), end=' ')
    b = original_board
    wait_for_player()
    print('\n'*90)
    
    print_boardV2(a, b)

def print_revealedV2(listC, a, b):
    '''(list of str, int, int, list of str)->None
    Prints the current board with the two new positions (p1 & p2) revealed from the original board
    Preconditions: p1 & p2 must be integers ranging from 1 to the length of the board
    '''
    # YOUR CODE GOES HERE
    print('\n')
    for i in range(len(listC)):
        print('{0:4}'.format(listC[i]), end=' ')
    print()
    for i in range(len(listC)):
        print('{0:4}'.format(str(i+1)), end=' ')
    copyA = a
    copyB = b
    wait_for_player()
    print('\n'*90)
    
    print_boardV2(copyA, copyB)

def print_revealedV3(aa, b):
    '''(list of str, int, int, list of str)->None
    Prints the current board with the two new positions (p1 & p2) revealed from the original board
    Preconditions: p1 & p2 must be integers ranging from 1 to the length of the board
    '''
    
    # YOUR CODE GOES HERE
    for i in range(len(aa)):
        print('{0:4}'.format(aa[i]), end=' ')
    print()
    for i in range(len(aa)):
        print('{0:4}'.format(str(i+1)), end=' ')
    wait_for_player()
    print('\n'*90)
    bbb = b   
    print_board(bbb)
    
    
#############################################################################
#   FUNCTIONS FOR OPTION 1 (with the board being read from a given file)    #
#############################################################################

def read_raw_board(file):
    '''str->list of str
    Returns a list of strings represeniting a deck of cards that was stored in a file. 
    The deck may not necessarifly be playable
    '''
    raw_board = open(file).read().splitlines()
    for i in range(len(raw_board)):
        raw_board[i]=raw_board[i].strip()
    return raw_board


def clean_up_board(l):
    '''list of str->list of str

    The functions takes as input a list of strings representing a deck of cards. 
    It returns a new list containing the same cards as l except that
    one of each cards that appears odd number of times in l is removed
    and all the cards with a * on their face sides are removed
    '''
    print("\nRemoving one of each cards that appears odd number of times and removing all stars ...\n")
    playable_board=[]
    playable_board = l[:]

    playable_board = [str(i) for i in playable_board]
    INew = ' '
    INew2 = ' '
    algo = 0
    checkStar = ' '
    
    for i in range(len(playable_board)):
        if i < len(playable_board):
            checkStar = playable_board[i]
            if checkStar == '*':
                playable_board.remove(playable_board[i])
            else:
                pass
        else:
            pass

    i = 0
    while i in range(len(playable_board)):
        INew = playable_board[i]
        for j in range(len(playable_board)):
            INew2 = playable_board[j]
            if INew == INew2:
                algo = algo + 1
            else:
                pass

        if algo % 2 != 0:
            playable_board.remove(INew)
            i = i
        else:
            i = i + 1
        algo = 0
    is_rigorous(playable_board)
    
    return playable_board


def is_rigorous(l):
    '''list of str->True or None
    Returns True if every element in the list appears exactlly 2 times or the list is empty.
    Otherwise, it returns False.

    Precondition: Every element in the list appears even number of times
    '''

    nott = 0
    for i in range(len(l)):
        if l.count(l[i]) == 2:
            pass
        else:
            nott = 5
            
    if nott == 5:
        if len(l) >= 10:
            print(72*'*' + '\n' + '*' + str(70*' ') + '*' + '\n' +
              '* __This deck is now playable but not rigorous and it has ' + str(len(l))  +' cards.__  *' +
              '\n' + '*' + str(70*' ') + '*' + '\n' + (72*'*'))
        elif len(l) < 10:
            print(71*'*' + '\n' + '*' + str(69*' ') + '*' + '\n' +
              '* __This deck is now playable but not rigorous and it has ' + str(len(l))  +' cards.__  *' +
              '\n' + '*' + str(69*' ') + '*' + '\n' + (71*'*'))
        wait_for_player()
        print('\n'*90)
        return False
    else:
        if len(l) >= 10:
            print(69*'*' + '\n' + '*' + str(67*' ') + '*' + '\n' +
              '* __This deck is now playable and rigorous and it has ' + str(len(l)) + ' cards.__  *' +
              '\n' + '*' + str(67*' ') + '*' + '\n' + (69*'*'))
        elif len(l) < 10:
            print(67*'*' + '\n' + '*' + str(65*' ') + '*' + '\n' +
              '* __This deck is now playable and rigorous and it has ' + str(len(l)) + ' cards.__  *' +
              '\n' + '*' + str(65*' ') + '*' + '\n' + (67*'*'))
        wait_for_player()
        print('\n'*90)
        return True

def play_game(board):
    '''(list of str)->None
    Plays a concentration game using the given board
    Precondition: board a list representing a playable deck
    '''

    print("Ready to play ...\n")

    # this is the funciton that plays the game
    # YOUR CODE GOES HERE
    board=clean_up_board(board)
    shuffle_deck(board)
    print_board(board)

#main
print(45*'*' + '\n' + '*' + str(43*' ') + '*' + '\n' +
      '* __Welcome to my Concentration game__ *' +
      '\n' + '*' + str(43*' ') + '*' + '\n' + (45*'*'))
    

choice = int(input('Would you like (enter 1 or 2 to indicate your choice): \n(1)me to generage a rigorous deck of cards for you \n(2)or, would you lke me to read a deck from a file? \n'))
while (choice != 1 and choice != 2):
    choice = int(input((str(choice) + ' is not an existing option. Please try again. Enter 1 or 2 to indicate your choice \n')))
    
    

# In option 1 somewhere you need to and MUST have a call like this:
if (choice == 1):
    print('You chose to have a rigorous deck generated for you \n')
    size = int(input('How many cards do you want to play with? \nEnter an even number between 0 and 52: '))
    while (size % 2 != 0):
        size = int(input('\nHow many cards do you want to play with? \nEnter an even number between 0 and 52: '))

    while (size <= 0) or (size >= 52):
        size = int(input('\nHow many cards do you want to play with? \nEnter an even number between 0 and 52: '))

    print('Shuffling the deck...')
    board = create_board(size)
    
    


# In option 2 somewhere you need to and MUST have the following 4 lines of code one after another
if (choice == 2):
    print("You chose to load a deck of cards from a file")
    file=input("Enter the name of the file: ")
    file=file.strip()
    board=read_raw_board(file)
    board=clean_up_board(board)
    if len(board) == 0:
        print('\n'*92)
        print('Shuffling the deck...')
        wait_for_player()
        print('\n'*111)
        print('The resulting board is empty. \nPlaying concentration board with an empty board is impossible. \nGood bye')
    else:
        size = int(len(board))
        print('\n'*92)
        print('Shuffling the deck...')
        wait_for_player()
        print('\n'*111)
        shuffle_deckV2(board)
            
    
    

    
    
